@model GovFinance.Models.Expense
@using System.Globalization
@{
    ViewData["Title"] = "تعديل مصروف";
    var inv = CultureInfo.InvariantCulture;
    var outstanding = Model.Amount - Model.PaidAmount;
}

<h1 class="h4 mb-3">تعديل مصروف</h1>

<div class="row">
    <div class="col-lg-7">

        <div class="card mb-3">
            <div class="card-body">
                <div class="row text-center">
                    <div class="col">
                        <div class="text-muted">المبلغ الكلي</div>
                        <div class="h5 latin-digits" id="sumAmount">@Model.Amount.ToString("0.00", inv)</div>
                    </div>
                    <div class="col">
                        <div class="text-muted">المقبوض</div>
                        <div class="h5 latin-digits" id="sumPaid">@Model.PaidAmount.ToString("0.00", inv)</div>
                    </div>
                    <div class="col">
                        <div class="text-muted">المتبقّي</div>
                        <div class="h5 latin-digits">
                            <span id="sumRemaining">@outstanding.ToString("0.00", inv)</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <form asp-action="Edit" method="post" novalidate>
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <!-- نمرّر الدفعة الجديدة باسم newPayment -->
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="mb-3">
                <label asp-for="Source" class="form-label">المصدر</label>
                <input asp-for="Source" class="form-control" />
                <span asp-validation-for="Source" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Amount" class="form-label">المبلغ الكلي</label>
                <div class="btn-group flex-wrap gap-1 mb-2"
                     data-amount-pad
                     data-target="#Amount"
                     data-min="0">
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="50">+50</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="100">+100</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="250">+250</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="500">+500</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="1000">+1000</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-set="0">تصفير</button>
                </div>
                <input asp-for="Amount" class="form-control latin-digits"
                       id="Amount" type="number" step="any" inputmode="decimal" lang="en" dir="ltr" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>

            <!-- عرض القيم الحالية (للقراءة فقط) -->
            <div class="row g-2">
                <div class="col-md-6">
                    <label class="form-label">المقبوض الحالي</label>
                    <input class="form-control latin-digits" id="CurrentPaid"
                           value="@Model.PaidAmount.ToString("0.00", inv)" readonly />
                </div>
                <div class="col-md-6">
                    <label class="form-label">المتبقّي الحالي</label>
                    <input class="form-control latin-digits" id="CurrentRemaining"
                           value="@outstanding.ToString("0.00", inv)" readonly />
                </div>
            </div>

            <!-- الدفعة الجديدة -->
            <div class="mb-3 mt-3">
                <label for="newPayment" class="form-label">دفعة جديدة</label>
                <div class="btn-group flex-wrap gap-1 mb-2"
                     data-amount-pad
                     data-target="#newPayment"
                     data-min="0">
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="50">+50</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="100">+100</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="250">+250</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="500">+500</button>
                    <button type="button" class="btn btn-outline-warning btn-sm" data-inc="1000">+1000</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-set="0">تصفير</button>
                </div>
                <input name="newPayment" id="newPayment"
                       class="form-control latin-digits"
                       type="number" step="any" inputmode="decimal"
                       lang="en" dir="ltr" value="0" />

                <div class="form-text">أمصروف قيمة الدفعة المحصّلة الآن؛ سيتم تحديث المقبوض والمتبقّي.</div>
                @Html.ValidationMessage("newPayment", "", new { @class = "text-danger" })

            </div>

            <!-- معاينة بعد تطبيق الدفعة (فقط عرض) -->
            <div class="row g-2">
                <div class="col-md-6">
                    <label class="form-label">المقبوض بعد الدفعة</label>
                    <input class="form-control latin-digits" id="PreviewPaid" readonly />
                </div>
                <div class="col-md-6">
                    <label class="form-label">المتبقّي بعد الدفعة</label>
                    <input class="form-control latin-digits" id="PreviewRemaining" readonly />
                </div>
            </div>

            <div class="mb-3 mt-3">
                <label asp-for="Date" class="form-label">التاريخ</label>
                <input asp-for="Date" class="form-control" type="date" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>

            <div class="mb-3 form-actions-sticky">
                <label asp-for="Notes" class="form-label">ملاحظات</label>
                <input asp-for="Notes" class="form-control" />
                <span asp-validation-for="Notes" class="text-danger"></span>
            </div>

            <div class="mt-3 form-actions-sticky">
                <button type="submit" class="btn btn-primary">حفظ</button>
                <a asp-action="Index" class="btn btn-outline-secondary">رجوع</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function(){
          const $amount   = document.getElementById('Amount');
          const $currCol  = document.getElementById('CurrentPaid');
          const $currRem  = document.getElementById('CurrentRemaining');
          const $newPay   = document.getElementById('newPayment');
          const $pCol     = document.getElementById('PreviewPaid');
          const $pRem     = document.getElementById('PreviewRemaining');
          const $sumA     = document.getElementById('sumAmount');
          const $sumC     = document.getElementById('sumPaid');
          const $sumR     = document.getElementById('sumRemaining');

          const map = {'٠':'0','١':'1','٢':'2','٣':'3','٤':'4','٥':'5','٦':'6','٧':'7','٨':'8','٩':'9'};
          const toLatin = s => (s||'').replace(/[٠-٩]/g, ch => map[ch] ?? ch);
          const toNum = v => {
            const x = parseFloat(toLatin(String(v)).replace(',', '.'));
            return isNaN(x) ? 0 : x;
          }
          const fmt = n => (Math.round(n * 100) / 100).toFixed(2);

          function recompute(){
            const a  = toNum($amount.value);
            const c0 = toNum($currCol.value);
            const add = Math.max(0, toNum($newPay.value));

            let c1 = c0 + add;
            if (c1 > a) c1 = a;
            const r1 = Math.max(0, a - c1);

            $pCol.value = fmt(c1);
            $pRem.value = fmt(r1);

            // تحديث الكارت العلوي بحسب “المبلغ” الجديد (مع بقاء القيم الحالية)
            $sumA.textContent = fmt(a);
            $sumC.textContent = fmt(c0);
            $sumR.textContent = fmt(Math.max(0, a - c0));
          }

          [$amount, $newPay].forEach(el => {
            el.addEventListener('input', recompute);
            el.addEventListener('change', recompute);
          });

          // بداية
          recompute();
        })();
    </script>
}
